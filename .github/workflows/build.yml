name: App build

on: [push]

permissions:
  contents: write

jobs:
  release:
    name: Create release
    if: contains(github.ref, '/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url

      - name: Upload release url
        uses: actions/upload-artifact@v4
        with:
          name: release_upload_url
          path: ./release_upload_url
          retention-days: 7

  build:
    name: Build ${{ matrix.config.name }}${{ matrix.config.tag }}
    runs-on: ${{ matrix.config.os }}
    env:
      OS: ${{ matrix.config.name }}
      MSVC_VERSION: C:/Program Files/Microsoft Visual Studio/2022/Enterprise
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "win32", os: windows-latest }
          - { name: "linux", os: ubuntu-22.04 }
          # - { name: "macos", os: macos-latest }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install system libs
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 'libxcb-*'
          echo "QMAKE_FLAGS=QMAKE_CXX=g++-10 QMAKE_CC=gcc-10 QMAKE_LINK=g++-10" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ env.OS }}-${{ hashFiles('./share/ci/*.py') }}
          restore-keys: |
            ${{ env.OS }}-

      - name: Make a release
        shell: bash
        run: |
          python ./share/ci/release.py
          echo "artifact=$(python ./share/ci/release.py artifact_name)" >> $GITHUB_ENV

      - name: Upload build artifact
        if: env.artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: ./${{ env.artifact }}
          retention-days: 7

      - name: Download release url
        if: contains(github.ref, '/tags/')
        uses: actions/download-artifact@v4
        with:
          name: release_upload_url
          path: ./

      - name: Set release env
        if: contains(github.ref, '/tags/')
        shell: bash
        run: echo "upload_url=$(cat ./release_upload_url)" >> $GITHUB_ENV

      - name: Upload release artifacts
        if: contains(github.ref, '/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ./${{ env.artifact }}
          asset_name: ${{ env.artifact }}
          asset_content_type: application/zip
